module nat

import bool
import pair

-- Here's our data type definition.

||| A data type to represent the natural numbers.  We use a lower case
||| "n" in the name to distinguish our nat type from Idris's Nat type
data nat = O | S nat

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

|||return false if the argument is odd otherwise true
oddb: nat -> bool
oddb n = not (evenb n)

||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair (n) (m) ))

multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair m (multp (mkPair n m)))

factp: nat -> nat
factp O = S O
factp (S n) = multp (mkPair (S n) (factp n)) 

|||Given a pair of natural numbers, (a, b), return a-b.
|||If a <=b, the answer will be O.
subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

exp: pair nat nat -> nat
exp (mkPair O n) = O
exp (mkPair x O) = S O
exp (mkPair x (S n)) = multp (mkPair x (exp (mkPair x n)))

|||Given a pair of natural numbers, (a, b), return true if a is less than or equal to b, otherwise return false
lep: pair nat nat -> bool
lep (mkPair O b) = true
lep (mkPair a O) = false
lep (mkPair (S a) (S b)) = lep (mkPair a b)

 -- given a pair of natural numbers, (a, b), return true if a is equal to b, otherwise return false
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair a O) = false
eqp (mkPair O b) = false
eqp (mkPair (S a) (S b)) = (eqp (mkPair a b))

-- given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false
gtp: pair nat nat -> bool
gtp (mkPair a b) = not (lep (mkPair a b))

-- given a pair of natural numbers, (a, b), return true if a is greater than or equal to b
gep: pair nat nat -> bool
gep (mkPair a b) = xorp (mkPair (gtp (mkPair a b)) (eqp (mkPair a b)))

 -- given a pair of natural numbers, (a, b), return true if a is less than b
ltp: pair nat nat -> bool
ltp (mkPair a b) = xorp (mkPair (lep (mkPair a b)) (eqp (mkPair a b)))

fib: nat -> nat
fib (O) = O
fib (S O) = (S O)
fib (S (S O)) = (S O)
fib (S (S n)) = addp (mkPair (fib (S n)) (fib n))

